always assume {
  
  ((room.empty -> !lightswitch.toggled)) ;
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
   (! (room.light.on <-> room.light.off)) ;
  (([ room.light <- turnOn() ] || ([ room.light <- toggle() ] && room.light.off))
    -> X F (([ room.light <- turnOff() ] || [ room.light <- toggle() ]) R room.light.on)) ;
  (([ room.light <- turnOff() ] || ([ room.light <- toggle() ] && room.light.on))
    -> X F (([ room.light <- turnOn() ] || [ room.light <- toggle() ]) R room.light.off)) ;
  ([system.startNewTimer <- hour2()]
    -> F timeout) ;
  ([system.startNewTimer <- hour1()] -> F timeout) ;
  ([system.startNewTimer <- min20()]
    -> F timeout);
 }
always guarantee {
    !(room.somebodyLeaves && room.empty
    -> ([system.startNewTimer <- hour2()]
    && F ( room.somebodyEnters
        || (timeout && F (room.light.off W room.somebodyEnters)))));
}
