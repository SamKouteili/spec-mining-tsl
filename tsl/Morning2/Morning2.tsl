always assume {
  
  ((room.empty -> !switch.toggled)) ;
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (! (room.light.on <-> room.light.off)) ;
  (([ room.light <- turnOn() ] || ([ room.light <- toggle() ] && room.light.off))
    -> X F (([ room.light <- turnOff() ] || [ room.light <- toggle() ]) R room.light.on)) ;
  (([ room.light <- turnOff() ] || ([ room.light <- toggle() ] && room.light.on))
    -> X F (([ room.light <- turnOn() ] || [ room.light <- toggle() ]) R room.light.off)) ;
  (! (room.shades.open && room.shades.closed)) ;
  ([ room.shades.ctrl <- moveTo percent100() ]
    -> F ((! [ room.shades.ctrl <- moveTo percent100() ] && ! [ room.shades.ctrl <- room.shades.ctrl ]) R room.shades.open)) ;
  ([ room.shades.ctrl <- moveTo percent0() ]
    -> F ((! [ room.shades.ctrl <- moveTo percent0() ] && ! [ room.shades.ctrl <- room.shades.ctrl ]) R room.shades.closed)) ;
  (F t.saturday) ;
  (F ! t.saturday) ;
  (F t.sunday) ;
  (F ! t.sunday) ;
  ([alarm.control <- turnOn()] -> [alarm.control <- turnOff()] R alarm) ;
  ([alarm.control <- turnOff()] -> [alarm.control <- turnOn()] R !alarm);
 }
always guarantee {
  
  t.am630 && (!(t.saturday || t.sunday)) && bed.occupied
    -> ( (F (((room.shades.open <-> bright outside.brightness) && (room.light.on <-> ! bright outside.brightness)) W (room.somebodyLeaves && room.empty)))
      && (F (bed.exit || (t.am7 && F (alarm W bed.exit)))));
  
}
